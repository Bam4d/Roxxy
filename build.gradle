apply plugin: 'cpp'

def cefResourcePath = file("ceflib").absolutePath

def cefResources = copySpec {
    from(cefResourcePath) {
        include "*"
	include "locales/*"
    }
}

task copyCefResources << {
    ['build/exe/roxxy/debug', 'build/exe/roxxy/release'].each { dest ->
        copy {
            with cefResources
            into dest
        }
    }

}

model {
    buildTypes {
        debug
        release
    }

    components {
        roxxy(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cc"
                    }
                }
            }
        }
    }

    binaries {
        all {
            // Linker and compiler arguments
            if (toolChain in Gcc) {
                cppCompiler.args "-D__GXX_EXPERIMENTAL_CXX0X__", "-D__cplusplus=201103L", "-I"+cefResourcePath, "-O2", "-g3", "-Wall", "-c", "-fmessage-length=0", "-std=c++11", "-MMD", "-MP"
                linker.args "-lglog", "-ldouble-conversion", "-lpthread", "-lgflags", "-lproxygenhttpserver", "-lfolly", cefResourcePath+"/libcef.so", cefResourcePath+"/libcef_dll_wrapper.a"
            }  
            build.finalizedBy copyCefResources
        }
    }
}



    
