apply plugin: 'cpp'

def cefBinaryPath = file("../cef_binary_linux64").absolutePath

model {
    components {
        roxxy(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cc"
                    }
                }
            }
        }
    }
}

model {
    binaries {
        all {
            // Linker and compiler arguments
            if (toolChain in Gcc) {
                cppCompiler.args "-D__GXX_EXPERIMENTAL_CXX0X__", "-D__cplusplus=201103L", "-I"+cefBinaryPath, "-O2", "-g3", "-Wall", "-c", "-fmessage-length=0", "-std=c++11", "-MMD", "-MP"
                linker.args "-lglog", "-ldouble-conversion", "-lpthread", "-lgflags", "-lproxygenhttpserver", "-lfolly", cefBinaryPath+"/Debug/libcef.so", cefBinaryPath+"/libcef_dll/libcef_dll_wrapper.a"
            }
        }
    }
}
    
